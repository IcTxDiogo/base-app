#!/bin/bash
set -e

APP_USER="sail"
NODE_USER="node"
ARGS=("$@")

show_help() {
    echo "Uso: ./dev <comando> [argumentos]"
    echo ""
    echo "Comandos de Gest√£o do Ambiente:"
    echo "  up, down, ps, logs, ...  Executa qualquer comando padr√£o do Docker Compose (ex: ./dev logs -f app)."
    echo "  reset                    Reseta o ambiente completamente, for√ßando uma nova instala√ß√£o."
    echo ""
    echo "Ferramentas de Desenvolvimento:"
    echo "  artisan [args]           Executa um comando Artisan (ex: ./dev artisan make:model Produto)."
    echo "  composer [args]          Executa um comando Composer (ex: ./dev composer require ...)."
    echo "  pint [args]              Formata o c√≥digo com Laravel Pint (ex: ./dev pint --test)."
    echo "  npm [args]               Executa um comando NPM (ex: ./dev npm install axios)."
    echo "  php [args]               Executa um comando PHP gen√©rico no container 'app'."
    echo ""
    echo "Ferramentas de Testes:"
    echo "  test [pest args]         Roda os testes de backend (Unit/Feature) com Pest em paralelo."
    echo "  test:watch [pest args]   Roda os testes de backend em modo 'watch'."
    echo "  test:coverage [args]     Gera cobertura de c√≥digo para os testes de backend."
    echo "  test:dusk [dusk args]    Roda os testes de browser (End-to-End) com Dusk."
    echo ""
    echo "Acesso aos Containers:"
    echo "  shell                    Abre um terminal no container 'app' como usu√°rio '$APP_USER'."
    echo "  node-shell               Abre um terminal no container 'node' como usu√°rio '$NODE_USER'."
    echo "  root                     Abre um terminal como 'root' no container 'app' (para tarefas de admin)."
    echo ""
    echo "  help | -h | --help       Mostra esta mensagem de ajuda."
}

cleanup_node() {
  echo "-> (Cleanup) Reiniciando container 'node' para desenvolvimento..."
  docker compose start node >/dev/null 2>&1 || true
}

case "$1" in
    help|-h|--help)
        show_help
        ;;
    setup)
        echo "copiando o .env e .env.dusk.local"
        cp .env.example .env
        cp .env.dusk.example .env.dusk.local
        exit 1
        ;;
    reset)
        echo "üîÑ Resetando e reconstruindo o ambiente completamente..."
        echo "-> Passo 1/3: Removendo flags de instala√ß√£o..."
        docker compose exec -u $APP_USER app sh -c "rm -f /var/www/html/storage/installed.flag"
        docker compose exec -u $NODE_USER node sh -c "rm -f /var/www/html/node_modules/.installed.flag"
        echo "-> Passo 2/3: Parando e removendo todos os containers..."
        docker compose down
        echo "-> Passo 3/3: Subindo o ambiente e executando a configura√ß√£o inicial..."
        docker compose up -d --build
        echo ""
        echo "‚úÖ Ambiente resetado e no ar! A configura√ß√£o inicial ser√° executada em segundo plano."
        echo "   Use './dev logs -f app' e './dev logs -f node' para acompanhar o processo."
        ;;
    artisan|art)
        shift; echo "Laravel ‚Ä∫ php artisan $@"; docker compose exec -u $APP_USER app php artisan "$@"
        ;;
    composer|comp)
        shift; echo "Composer ‚Ä∫ $@"; docker compose exec -u $APP_USER app composer "$@"
        ;;
    pint)
        shift; echo "üé® Formatando c√≥digo com Pint..."; docker compose exec -u $APP_USER app ./vendor/bin/pint "$@"
        ;;
    npm)
        shift; echo "NPM ‚Ä∫ $@"; docker compose exec -u $NODE_USER node npm "$@"
        ;;
    php)
        shift; echo "PHP ‚Ä∫ $@"; docker compose exec -u $APP_USER app php "$@"
        ;;
    test)
        shift
        echo "üß™ Executando testes de backend com Pest (em paralelo)..."
        docker compose exec -u $APP_USER app php artisan test --parallel "$@"
        ;;
    test:watch)
        shift
        PEST_ARGS="$@"

        if ! command -v inotifywait >/dev/null 2>&1; then
            echo "[!] 'inotifywait' n√£o encontrado. Para usar o modo 'watch', por favor instale com: sudo apt install inotify-tools"
            exit 1
        fi

        run_tests() {
            clear
            echo "[watch] Executando testes com os argumentos: '$PEST_ARGS'..."
            docker compose exec -u $APP_USER -e COLUMNS=$(tput cols) -T app php artisan test $PEST_ARGS || true
            echo -e "\n[watch] ‚úÖ Testes conclu√≠dos. Aguardando novas altera√ß√µes... (Ctrl+C para sair)"
        }

        run_tests
        set +e
        while true; do
            inotifywait -r -e modify,create,delete --exclude '(\.git|storage|vendor|\.phpunit\.result\.cache|node_modules)' ./app ./tests >/dev/null 2>&1
            run_tests
        done
        set -e
        ;;
    test:coverage)
        shift
        echo "üìä Gerando relat√≥rio de cobertura para Pest (paralelo)..."
        echo "üîß Configurando Xdebug para coverage..."
        docker compose exec -e XDEBUG_MODE=coverage -u $APP_USER app php artisan test --parallel --coverage --min=80 "$@"
        echo "‚úÖ Relat√≥rio de cobertura gerado."
        ;;
    test:dusk)
        shift
        trap cleanup_node EXIT

        echo "üåí Executando testes de Browser com Dusk..."
        
        echo "-> Compilando assets do frontend..."
        docker compose exec -u $NODE_USER -e "FORCE_COLOR=1" node npm run build | tail -n 10
        
        echo "-> Parando container 'node' para remover o arquivo 'hot'..."
        docker compose stop node >/dev/null 2>&1 || true
        
        echo "-> Rodando su√≠te de testes de browser..."
        docker compose exec -u $APP_USER app php artisan dusk "$@"
        
        echo "‚úÖ Testes Dusk finalizados com sucesso."
        ;;
    shell)
        echo "üíª Acessando o terminal do container 'app' como usu√°rio '$APP_USER'..."; docker compose exec -u $APP_USER app sh ;;
    node-shell)
        echo "üåê Acessando o terminal do container 'node' como usu√°rio '$NODE_USER'..."; docker compose exec -u $NODE_USER node sh ;;
    root)
        echo "üö® Acessando o terminal do container 'app' como usu√°rio 'root'..."; docker compose exec -u root app sh ;;
    *)
        echo "Docker ‚Ä∫ docker compose $@"; docker compose "$@" ;;
esac